openapi: 3.0.1
info:
  title: Digital Wallet API
  description: API documentation for Digital Wallet
  contact:
    name: Huseyin Ersoy
    email: huseyin.ersoy@gmail.com
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - Bearer Authentication: []
tags:
  - name: Customer API
    description: Operations related to customers
  - name: Authorization API
    description: Operations related to authorization
  - name: Wallet API
    description: Operations related to wallet
paths:
  /api/wallets/create:
    post:
      tags:
        - Wallet API
      summary: Create a new wallet
      description: Customer create his own wallet, Employee has access for all
      operationId: createWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wallet'
      security:
        - Bearer Authentication: []
  /api/transactions/withdraw:
    post:
      tags:
        - Wallet API
      summary: Withdraw on a wallet
      description: Customer withdraws his own wallets, Employee has access for all
      operationId: withdraw
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Transaction'
      security:
        - Bearer Authentication: []
  /api/transactions/deposit:
    post:
      tags:
        - Wallet API
      summary: Deposit on a wallet
      description: Customer deposits his own wallets, Employee has access for all
      operationId: deposit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Transaction'
      security:
        - Bearer Authentication: []
  /api/transactions/approve:
    post:
      tags:
        - Wallet API
      summary: Approval on transaction
      description: Customer does approval on his own transactions, Employee has access for all
      operationId: approveTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Transaction'
      security:
        - Bearer Authentication: []
  /api/customers/create:
    post:
      tags:
        - Customer API
      summary: Create a new customer
      description: Only employees can create customers
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
      security:
        - Bearer Authentication: []
  /api/auth/login:
    post:
      tags:
        - Authorization API
      summary: User Login
      description: The user can be employee or customer
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/auth/employee/create:
    post:
      tags:
        - Authorization API
      summary: Create a new employee
      description: Only employees can create customers
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
  /api/wallets/{walletId}/transactions:
    get:
      tags:
        - Wallet API
      summary: List wallet transactions
      description: Customer lists his own wallet transactions, Employee has access for all
      operationId: listTransactions
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
      security:
        - Bearer Authentication: []
  /api/wallets/{customerId}:
    get:
      tags:
        - Wallet API
      summary: List customer wallets
      description: Customer lists his own wallets, Employee has access for all
      operationId: getWallets
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
      security:
        - Bearer Authentication: []
  /api/wallets/{customerId}/currency/{currency}:
    get:
      tags:
        - Wallet API
      summary: List customer wallets based on currency
      description: Customer lists his own wallets, Employee has access for all
      operationId: getWalletsByCustomerAndCurrency
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
      security:
        - Bearer Authentication: []
  /api/customers/{customerId}:
    get:
      tags:
        - Customer API
      summary: Get a customer by ID
      description: Employees can get any customer, customers can only get themselves
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
      security:
        - Bearer Authentication: []
  /api/auth/me:
    get:
      tags:
        - Authorization API
      summary: Authorized User
      description: 'Authenticated user detail is returned '
      operationId: getLoggedInUser
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    CreateWalletRequestDto:
      required:
        - currency
        - customerId
        - name
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        name:
          type: string
        currency:
          type: string
        shop:
          type: boolean
        withdraw:
          type: boolean
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        tckn:
          type: string
        username:
          type: string
        password:
          type: string
        role:
          type: string
    Wallet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customer:
          $ref: '#/components/schemas/Customer'
        walletName:
          type: string
        currency:
          type: string
        activeForShopping:
          type: boolean
        activeForWithdraw:
          type: boolean
        balance:
          type: number
        usableBalance:
          type: number
    WithdrawRequestDto:
      required:
        - amount
        - destination
        - destinationType
        - walletId
      type: object
      properties:
        walletId:
          type: integer
          format: int64
        amount:
          type: number
        destination:
          type: string
        destinationType:
          type: string
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wallet:
          $ref: '#/components/schemas/Wallet'
        amount:
          type: number
        type:
          type: string
        oppositePartyType:
          type: string
        oppositeParty:
          type: string
        status:
          type: string
    DepositRequestDto:
      required:
        - amount
        - source
        - sourceType
        - walletId
      type: object
      properties:
        walletId:
          type: integer
          format: int64
        amount:
          type: number
        sourceType:
          type: string
        source:
          type: string
    ApprovalRequestDto:
      required:
        - status
        - transactionId
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
        status:
          type: string
    CreateCustomerRequestDto:
      required:
        - name
        - password
        - surname
        - tckn
        - username
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        tckn:
          type: string
        username:
          type: string
        password:
          type: string
    LoginRequestDto:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    Bearer Authentication:
      type: http
      name: Bearer Authentication
      scheme: bearer
      bearerFormat: JWT
